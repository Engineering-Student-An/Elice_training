plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.elice'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc:3.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:3.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-websocket:3.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-aop:3.2.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.h2database:h2:2.2.224'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    runtimeOnly 'com.mysql:mysql-connector-j:8.2.0'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.2.0'
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    useJUnitPlatform()
}


task renameTestResults {
    doLast {
        file("${buildDir}/test-results/test").listFiles().findAll { it.name.endsWith(".xml") }.each { File file ->
            def newName = "${buildDir}/test-results/test/test-results.xml"
            file.renameTo(new File(newName))
        }
    }
}

test.finalizedBy(renameTestResults)

test {
    reports {
        junitXml.enabled = true
        html.enabled = false
    }

    useJUnitPlatform() // JUnit 5를 사용하도록 설정
    testLogging {
        events "passed", "skipped", "failed" // 통과, 스킵, 실패한 테스트 이벤트 출력
        showStandardStreams = true // 표준 출력 스트림 출력

        // 각 테스트의 설명이 표시되도록 설정
        exceptionFormat = 'full'
        afterTest { descriptor, result ->
            println "Test: ${descriptor.displayName} - ${result.resultType}"
        }
    }


}